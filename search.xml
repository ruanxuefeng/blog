<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Camunda SpringBoot 4 发布流程</title>
      <link href="/2022/06/16/Camunda-SpringBoot-4-%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/06/16/Camunda-SpringBoot-4-%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-rest:7.17.0&#x27;</span></span><br></pre></td></tr></table></figure><p>运行SpringBoot项目。</p><p>保存创建的流程图，点击发布按钮。<br><img src="https://www.ruanxuefeng.com/source/blog/blog8/1.jpg" alt="图片 | center"><br>REST point：<code>http：ip:port/engine-rest</code>，就是流程要部署的项目地址，Camunda会自动部署此流程。</p><p>进入Camunda Web端，进入Cockpit中查看。<br><img src="https://www.ruanxuefeng.com/source/blog/blog8/2.jpg" alt="图片 | center"></p><h3 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h3><p>进入Tasklist，点击Start process。<br><img src="https://www.ruanxuefeng.com/source/blog/blog8/3.jpg" alt="图片 | center"><br><img src="https://www.ruanxuefeng.com/source/blog/blog8/4.jpg" alt="图片 | center"><br>完成后刷新页面，点击Complete按钮，至此流程审批完成。<br><img src="https://www.ruanxuefeng.com/source/blog/blog8/5.jpg" alt="图片 | center"></p>]]></content>
      
      
      <categories>
          
          <category> Camunda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Camunda </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Camunda SpringBoot 3 创建一个简单流程</title>
      <link href="/2022/06/16/Camunda-SpringBoot-3-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/06/16/Camunda-SpringBoot-3-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="下载Modeler"><a href="#下载Modeler" class="headerlink" title="下载Modeler"></a>下载Modeler</h3><p>首先下载<a href="https://camunda.com/download/modeler/"><code>Camunda Modeler</code></a>，选择自己的操作系统对应的安装包。<br><img src="https://www.ruanxuefeng.com/source/blog/blog7/1.jpg" alt="图片 | center"><br>创建一个画布。<br><img src="https://www.ruanxuefeng.com/source/blog/blog7/2.jpg" alt="图片 | center"><br><img src="https://www.ruanxuefeng.com/source/blog/blog7/3.jpg" alt="图片 | center"><br>然后添加一个用户任务。选中开始节点点击任务。<br><img src="https://www.ruanxuefeng.com/source/blog/blog7/4.jpg" alt="图片 | center"><br><img src="https://www.ruanxuefeng.com/source/blog/blog7/5.jpg" alt="图片 | center"><br><img src="https://www.ruanxuefeng.com/source/blog/blog7/6.jpg" alt="图片 | center"><br>然后给一个审批人，审批人需要Camunda的用户表中存在的用户。<br><img src="https://www.ruanxuefeng.com/source/blog/blog7/7.jpg" alt="图片 | center"><br>最后添加结束节点。<br><img src="https://www.ruanxuefeng.com/source/blog/blog7/8.jpg" alt="图片 | center"><br><img src="https://www.ruanxuefeng.com/source/blog/blog7/9.jpg" alt="图片 | center"><br>至此流程创建结束。</p>]]></content>
      
      
      <categories>
          
          <category> Camunda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Camunda </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Camunda SpringBoot 2 双数据源</title>
      <link href="/2022/06/14/Camunda-SpringBoot-2-%E5%8F%8C%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
      <url>/2022/06/14/Camunda-SpringBoot-2-%E5%8F%8C%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>使用<code>Camunda</code>配置双数据源不是必须的，因为<code>Camunda</code>表的命名方式和自己的方式有区别，而且放在一起显得比较乱，所以将<code>Camunda</code>的表单独存放。</p><p>首先多数据源配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 主数据源配置</span></span><br><span class="line">    <span class="attr">primary:</span></span><br><span class="line">      <span class="comment"># 我这用了P6spy，如果你本地没用需要替换成你自己的驱动</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.p6spy.engine.spy.P6SpyDriver</span></span><br><span class="line">      <span class="comment"># 协议也需要换</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:p6spy:mariadb://192.168.10.65:3306/am_server?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8&amp;zeroDateTimeBehavior=convertToNull</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># Canmunda数据源配置</span></span><br><span class="line">    <span class="attr">camunda:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.p6spy.engine.spy.P6SpyDriver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:p6spy:mariadb://192.168.10.65:3306/camunda?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8&amp;zeroDateTimeBehavior=convertToNull</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>然后新建一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zaxxer.hikari.HikariDataSource;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多数据源配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 阮雪峰</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;primaryDataSourceProperties&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.primary&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceProperties <span class="title function_">primaryDataSourceProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 引入主数据源</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceProperties</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主数据源配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;primaryDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.primary.hikari&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">primaryDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获得 DataSourceProperties 对象</span></span><br><span class="line">        <span class="type">DataSourceProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="built_in">this</span>.primaryDataSourceProperties();</span><br><span class="line">        <span class="comment">// 创建 HikariDataSource 对象</span></span><br><span class="line">        <span class="keyword">return</span> createHikariDataSource(properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;camundaDataSourceProperties&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.camunda&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceProperties <span class="title function_">camundaDataSourceProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceProperties</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Canmunda数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;camundaBpmDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.camunda.hikari&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">camundaDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;---工作流数据源加载成功！---&quot;</span>);</span><br><span class="line">        <span class="comment">// 获得 DataSourceProperties 对象</span></span><br><span class="line">        <span class="type">DataSourceProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="built_in">this</span>.camundaDataSourceProperties();</span><br><span class="line">        <span class="comment">// 创建 HikariDataSource 对象</span></span><br><span class="line">        <span class="keyword">return</span> createHikariDataSource(properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HikariDataSource <span class="title function_">createHikariDataSource</span><span class="params">(DataSourceProperties properties)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 HikariDataSource 对象</span></span><br><span class="line">        <span class="type">HikariDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> properties.initializeDataSourceBuilder().type(HikariDataSource.class).build();</span><br><span class="line">        <span class="comment">// 设置线程池名</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(properties.getName())) &#123;</span><br><span class="line">            dataSource.setPoolName(properties.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目。</p>]]></content>
      
      
      <categories>
          
          <category> Camunda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Camunda </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 多数据源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Camunda SpringBoot 1 起步</title>
      <link href="/2022/06/14/Camunda-SpringBoot-1-%E8%B5%B7%E6%AD%A5/"/>
      <url>/2022/06/14/Camunda-SpringBoot-1-%E8%B5%B7%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:7.17.0&#x27;</span></span><br></pre></td></tr></table></figure><p>这个依赖同时会引入一个Web端的管理界面，如果不需要只需要引入</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter:7.17.0&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">camunda:</span></span><br><span class="line">  <span class="attr">bpm:</span></span><br><span class="line">    <span class="attr">database:</span></span><br><span class="line">      <span class="comment"># 数据库类型可以不加</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">mariadb</span></span><br><span class="line">      <span class="comment"># 关闭批量处理</span></span><br><span class="line">      <span class="attr">jdbc-batch-processing:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 默认用户配置</span></span><br><span class="line">    <span class="attr">admin-user:</span></span><br><span class="line">      <span class="comment"># 用户名</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">firstName:</span> <span class="string">Demo</span></span><br><span class="line">    <span class="attr">filter:</span></span><br><span class="line">      <span class="attr">create:</span> <span class="string">All</span> <span class="string">tasks</span></span><br></pre></td></tr></table></figure><p>其他配置<a href="https://docs.camunda.org/manual/latest/user-guide/spring-boot-integration/configuration/"><code>官方文档</code></a>。</p><p>启动项目。访问：<code>http://localhost:port</code></p><p><img src="https://www.ruanxuefeng.com/source/blog/blog5/1.jpg" alt="成功 | center"></p>]]></content>
      
      
      <categories>
          
          <category> Camunda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Camunda </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web端实时显示服务器日志</title>
      <link href="/2020/06/14/Web%E7%AB%AF%E5%AE%9E%E6%97%B6%E6%98%BE%E7%A4%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A5%E5%BF%97/"/>
      <url>/2020/06/14/Web%E7%AB%AF%E5%AE%9E%E6%97%B6%E6%98%BE%E7%A4%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近看了一个项目，有一个实时打印服务器日志的功能，但是他这个实现方法是不断的轮训服务器，请求日志然后显示到页面上。我觉得这种方法不是那么好，觉得还是用<code>WebSocket</code>推送的方式比较不错，所以实现一个服务器端推送日志的功能。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>因为后端使用<code>Logback</code>打印日志，所以看了一下<a href="http://logback.qos.ch/documentation.html"><code>Logback</code></a> 的文档，他有一些自己实现的推送日志的功能，但是都是通过<code>Socket</code>实时推送到一个专门的日志服务器上，和我的想法有点区别。如果有需要可以看看文档中的<a href="http://logback.qos.ch/manual/receivers.html"><code>Receivers</code></a> 章节或者<a href="http://logback.qos.ch/manual/appenders.html"><code>Appenders</code></a> 章节。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>1、 配置WebSocket（自行配置）</p><p>2、 实现自己的<code>Appender</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.Level;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.spi.ILoggingEvent;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.AppenderBase;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.Layout;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.encoder.Encoder;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.encoder.LayoutWrappingEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.SimpMessagingTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneOffset;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 阮雪峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020年6月8日22:26:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketAppender</span> <span class="keyword">extends</span> <span class="title class_">AppenderBase</span>&lt;ILoggingEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">SEND_LOG_FLAG</span> <span class="operator">=</span> <span class="string">&quot;SEND_TO&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">ON</span> <span class="operator">=</span> <span class="string">&quot;ON&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">OFF</span> <span class="operator">=</span> <span class="string">&quot;OFF&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> Encoder&lt;ILoggingEvent&gt; encoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">append</span><span class="params">(ILoggingEvent eventObject)</span> &#123;</span><br><span class="line">        getContext().getProperty(SEND_LOG_FLAG);</span><br><span class="line">        <span class="keyword">if</span> (ON.equals(getContext().getProperty(SEND_LOG_FLAG)) &amp;&amp; applicationContext == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.applicationContext = (ApplicationContext) getContext().getObject(<span class="string">&quot;SpringApplicationContext&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Level</span> <span class="variable">level</span> <span class="operator">=</span> eventObject.getLevel();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="built_in">this</span>.encoder.encode(eventObject);</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> Instant.ofEpochMilli(eventObject.getTimeStamp()).atZone(ZoneOffset.ofHours(<span class="number">8</span>)).toLocalDateTime();</span><br><span class="line"></span><br><span class="line">        <span class="type">SystemLogVo</span> <span class="variable">systemLogVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SystemLogVo</span>(localDateTime, level.toInt(), level.levelStr, message);</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpMessagingTemplate</span> <span class="variable">simpMessagingTemplate</span> <span class="operator">=</span> applicationContext.getBean(SimpMessagingTemplate.class);</span><br><span class="line">        simpMessagingTemplate.convertAndSend(<span class="string">&quot;/topic/log&quot;</span>, systemLogVo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLayout</span><span class="params">(Layout&lt;ILoggingEvent&gt; layout)</span> &#123;</span><br><span class="line">        LayoutWrappingEncoder&lt;ILoggingEvent&gt; lwe = <span class="keyword">new</span> <span class="title class_">LayoutWrappingEncoder</span>&lt;&gt;();</span><br><span class="line">        lwe.setLayout(layout);</span><br><span class="line">        lwe.setContext(context);</span><br><span class="line">        <span class="built_in">this</span>.encoder = lwe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个需要注意的地方，因为日志启动是在Spring相关配置之前，所以在服务器启动之前是获取不到Spring管理的对象的。所以需要加一个配置，标识服务器是否已经启动完成，<code>SEND_LOG_FLAG</code>如果为<code>ON</code>则说明服务器已经启动，并且因为<code>Appender</code>对象并不是<code>Spring</code>管理的对象并不能直接获取<code>Spring</code>管理的对象，需要通过<code>ApplicationContext</code>来间接获取。所以这个时候需要使用<code>ApplicationListener</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.LoggerContext;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.ContextRefreshedEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 阮雪峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-10-14 13:22:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> &#123;</span><br><span class="line">        <span class="type">LoggerContext</span> <span class="variable">lc</span> <span class="operator">=</span> (LoggerContext) LoggerFactory.getILoggerFactory();</span><br><span class="line">        lc.putProperty(WebSocketAppender.SEND_LOG_FLAG, WebSocketAppender.ON);</span><br><span class="line">        lc.putObject(<span class="string">&quot;SpringApplicationContext&quot;</span>, event.getApplicationContext());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、前端页面接收日志。</p><p><img src="https://www.ruanxuefeng.com/source/blog/4/gifhome_640x352_4s.gif" alt="页面展示 | center"></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> WebSocket </tag>
            
            <tag> Logback </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap优化</title>
      <link href="/2020/04/13/HashMap%E4%BC%98%E5%8C%96/"/>
      <url>/2020/04/13/HashMap%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天接到领导通知，然我优化一个导出Excel功能，这个功能在线上4万多条数据大概用了65分钟倒完。</p><h2 id="捋顺代码"><a href="#捋顺代码" class="headerlink" title="捋顺代码"></a>捋顺代码</h2><p>看一下代码是怎么写的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExportService</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Workbook <span class="title function_">export</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/* 创建表格表头 */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在数据库中查询数据，大概在两三秒内完成，数量6W+</span></span><br><span class="line">        List&lt;Data&gt; list = getData();</span><br><span class="line">        <span class="comment">// 创建一个Map，Key是一个对象，Value是一个List，没太太理解为什么这么用</span></span><br><span class="line">        Map&lt;TargetObject, ArrayList&lt;String&gt;&gt; dataMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;ProductColorModel, ArrayList&lt;String&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Data d : list)&#123;</span><br><span class="line">            <span class="type">TargetObject</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetObject</span>();</span><br><span class="line">            <span class="comment">/* obj.set(data) */</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">mark</span> <span class="operator">=</span> d.getMark();</span><br><span class="line">            <span class="comment">// 这里大概理解为什么要创建一个Map了，大概是把其他数据相同，但是mark字段不同的数据整理出来</span></span><br><span class="line">            <span class="comment">// 类似一个去重操作，但是还要保留mark字段的值</span></span><br><span class="line">            <span class="keyword">if</span> (dataMap.get(obj) == <span class="literal">null</span>)&#123;</span><br><span class="line">                List&lt;String&gt; markList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">                markList.add(mark);</span><br><span class="line">                dataMap.put(obj, markList);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 List&lt;String&gt; markList = dataMap.get(obj);</span><br><span class="line">                 markList.add(mark);</span><br><span class="line">                 dataMap.put(obj, markList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历map</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;TargetObject, ArrayList&lt;String&gt;&gt; entry : dataMap.entrySet()) &#123;</span><br><span class="line">            <span class="type">TargetObject</span> <span class="variable">obj</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            ArrayList&lt;String&gt; markList = entry.getValue();</span><br><span class="line">            <span class="comment">// 将所有的标识字段以‘,’分割，生成字符串，也差不多理解那个dataMap的作用了</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">marksStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (String mark : markList) &#123;</span><br><span class="line">                marksStr += mark + <span class="string">&quot;;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 创建cell并赋值 obj.get() */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*设置单元格格式*/</span></span><br><span class="line">        <span class="comment">/*设置自动调整列宽*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库和导出excel的中间实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TargetObject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String field1;</span><br><span class="line">    <span class="keyword">private</span> String field2;</span><br><span class="line">    <span class="keyword">private</span> String field3;</span><br><span class="line">    <span class="keyword">private</span> String field4;</span><br><span class="line">    <span class="keyword">private</span> String field5;</span><br><span class="line">    <span class="keyword">private</span> Date field6;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">fmt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> TargetObject) &#123;</span><br><span class="line">            <span class="type">TargetObject</span> <span class="variable">model</span> <span class="operator">=</span> (TargetObject) obj;</span><br><span class="line">            <span class="keyword">if</span> (((model.materialNum == <span class="literal">null</span> &amp;&amp; materialNum == <span class="literal">null</span>) || model.materialNum</span><br><span class="line">                .equals(materialNum))</span><br><span class="line">                &amp;&amp; ((model.field1 == <span class="literal">null</span> &amp;&amp; field1 == <span class="literal">null</span>) || model.field1.equals(field1))</span><br><span class="line">                &amp;&amp; ((model.field2 == <span class="literal">null</span> &amp;&amp; field2 == <span class="literal">null</span>) || model.field2.equals(field2))</span><br><span class="line">                &amp;&amp; ((model.field3 == <span class="literal">null</span> &amp;&amp; field3 == <span class="literal">null</span>) || model.field2.equals(field3))</span><br><span class="line">                &amp;&amp; ((model.field4 == <span class="literal">null</span> &amp;&amp; field4 == <span class="literal">null</span>) || model.field2.equals(field4))</span><br><span class="line">                &amp;&amp; ((model.field5 == <span class="literal">null</span> &amp;&amp; field5 == <span class="literal">null</span>) || model.field2.equals(field5))</span><br><span class="line">                &amp;&amp; ((model.field6 == <span class="literal">null</span> &amp;&amp; field6 == <span class="literal">null</span>) || ((model.field6 != <span class="literal">null</span> &amp;&amp; updateDate != <span class="literal">null</span>)&amp;&amp;fmt</span><br><span class="line">                .format(model.field6).equals(fmt.format(field6))))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.equals(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>通过阅读前面代码，发现主要问题：<code>TargetObject</code>的<code>hashCode</code>方法返回值为0。这个问题在Map的size很小的时候发现不了问题，但是在现在的6W+数据中可以很明显的发现。因为Map底层实现是数组加链表（JDK8之前，本文中项目使用的是JDK7），并且使用Key值的hashcode值作为数组下标进行存储，所以<code>TargetObject</code>的<code>hashCode</code>方法返回值固定为0会导致所有的数据都存储在下标为0的链表上，这会导致这个链表很大，即使Map扩容也不会将数据随机分散在数组中。这就导致每一次get都是往全链表遍历的方向走。在<code>export</code>方法第一个for循环中，<code>dataMap.get(obj)</code>会越来越慢，到后面基本上就相当于一个N*N的一个循环了，并且get方法在后面的if中还调用了两次，这又乘个2，虽然这是个问题相当于前面的是个小问题，但是也是雪上加霜了。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>因为这个这里的业务不熟，所以sql就不看了，并且这个sql的速度还可以，在可以接受的范围内，所以我把重点优化的问题放在了Map相关的方向上。</p><p>1、将dataMap改为<code>Map&lt;String, TargetObject&gt;</code></p><p>2、删除<code>TargetObject</code>的<code>hashCode</code>和<code>equals</code></p><p>3、为<code>TargetObject</code>添加<code>getString</code>方法，作为dataMap的Key值</p><p>4、为<code>TargetObject</code>添加<code>markList</code>字段，和<code>addMark(String)</code>方法，以及<code>getAllMarkToString</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExportService</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Workbook <span class="title function_">export</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/* 创建表格表头 */</span></span><br><span class="line"></span><br><span class="line">        List&lt;Data&gt; list = getData();</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">        <span class="comment">// 一个小的优化点：HashMap初始化容量为16，在这次6W+的导出过程中大概要扩容11次，</span></span><br><span class="line">        <span class="comment">// 每次扩容都需要进行数组的拷贝，所以随着数据量增大拷贝次数增加，这里也会形成一个性能瓶颈，</span></span><br><span class="line">        <span class="comment">// 所以这里最好初始化一个容量</span></span><br><span class="line">        Map&lt;String, TargetObject&gt; dataMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, TargetObject&gt;(size);</span><br><span class="line">        <span class="comment">// 创建一个list存储要导出的数据，因为list的遍历速度要比map快一些，前面的map作为一个类似缓存的数据，</span></span><br><span class="line">        <span class="comment">// list这里也需要给以初始容量，因为ArrayList是数组实现，长度固定，所以每次扩容也需要进行数组拷贝，</span></span><br><span class="line">        <span class="comment">// 也会比较耗费性能，因为除了mark，其他字段相同的数据视为同一数据，所以最终数据肯定会少于size，</span></span><br><span class="line">        <span class="comment">// 所以这里给到一半，只会扩容一次，可以接受</span></span><br><span class="line">        List&lt;TargetObject&gt; dataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(size/<span class="number">2</span>);</span><br><span class="line">        TargetObject obj;</span><br><span class="line">        <span class="comment">//已经放入map中的数据</span></span><br><span class="line">        TargetObject hadObj;</span><br><span class="line">        <span class="keyword">for</span>(Data d : list)&#123;</span><br><span class="line">            obj = <span class="keyword">new</span> <span class="title class_">TargetObject</span>();</span><br><span class="line">            <span class="comment">/* obj.set(data) */</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">mark</span> <span class="operator">=</span> d.getMark();</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> obj.getString();</span><br><span class="line">            hadObj = dataMap.get(key);</span><br><span class="line">            <span class="keyword">if</span> (hadObj == <span class="literal">null</span>)&#123;</span><br><span class="line">                obj.addMark(mark);</span><br><span class="line">                dataMap.put(key, obj);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 hadObj.addMark(mark);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (TargetObject data : dataList) &#123;</span><br><span class="line">            <span class="comment">//将所有的标识字段以‘,’分割，生成字符串，也差不多理解那个dataMap的作用了</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">marksStr</span> <span class="operator">=</span> data.getAllMarkToString();</span><br><span class="line">            <span class="comment">/* 创建cell并赋值 */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*设置单元格格式*/</span></span><br><span class="line">        <span class="comment">/*设置自动调整列宽*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TargetObject</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String field1;</span><br><span class="line"><span class="keyword">private</span> String field2;</span><br><span class="line"><span class="keyword">private</span> String field3;</span><br><span class="line"><span class="keyword">private</span> String field4;</span><br><span class="line"><span class="keyword">private</span> String field5;</span><br><span class="line"><span class="keyword">private</span> Date field6;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; markList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">TargetObject</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.markList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMark</span><span class="params">(String mark)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.markList.add(mark);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAllMarkToString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (String mark : markList) &#123;</span><br><span class="line">            stringBuilder.append(mark);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> productsStr.toString();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 因为实体中大部分字段都为String类型，将所有字段拼接为一个长字符串后</span></span><br><span class="line"><span class="comment">     * 如果除了mark字段都相同，那么这个字符串也肯定相同，这样这个字符串作为Map的key值应该没什么问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">fmt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line">        <span class="comment">//也是给一个初始容量，防止多次扩容造成性能浪费</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">128</span>);</span><br><span class="line">        </span><br><span class="line">        stringBuilder.append(field1);</span><br><span class="line">        stringBuilder.append(field2);</span><br><span class="line">        stringBuilder.append(field3);</span><br><span class="line">        stringBuilder.append(field4);</span><br><span class="line">        stringBuilder.append(field5);</span><br><span class="line">        <span class="keyword">if</span> (field6!=<span class="literal">null</span>) &#123;</span><br><span class="line">            stringBuilder.append(fmt.format(field6));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>优化后同样数据用了不到一分钟左右搞定，效果还不错。但是我觉得应该还有优化空间，比如sql、两次循环是不是可以一次，这个有时间或者需要再次优化再看吧！</p><p>最后推荐大家几款性能定位工具：jstack、jmap、jstat，现在我们单位用的是jstack，可以直接定位卡点，效果非常好~~</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode之两数之和</title>
      <link href="/2019/08/16/LeetCode%E4%B9%8B%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2019/08/16/LeetCode%E4%B9%8B%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="1、两数之和"><a href="#1、两数之和" class="headerlink" title="1、两数之和"></a>1、两数之和</h1><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。示例:</p><p><code>给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1]</code></p><p>来源：力扣（LeetCode）链接：<a href="https://leetcode-cn.com/problems/two-sum">https://leetcode-cn.com/problems/two-sum</a></p><h2 id="1、暴力解"><a href="#1、暴力解" class="headerlink" title="1、暴力解"></a>1、暴力解</h2><p>暴力解，没什么说的，两层循环，每两个数相加判断是否等于target。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] twoSum1(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((nums[i] + nums[j]) == target) &#123;</span><br><span class="line">                result[<span class="number">0</span>] = i;</span><br><span class="line">                result[<span class="number">1</span>] = j;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、一遍哈希表-官方解法"><a href="#2、一遍哈希表-官方解法" class="headerlink" title="2、一遍哈希表(官方解法)"></a>2、一遍哈希表(官方解法)</h2><p>这个方法本质上是：拟定数组的当前下标的值为两数之中的一个数，然后去找另一个数，如果找不到则下一个数继续这么找，直到最后。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">complement</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(complement)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; map.get(complement), i &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;No two sum solution&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、数组解法"><a href="#3、数组解法" class="headerlink" title="3、数组解法"></a>3、数组解法</h2><p>数组为排序数组从两边同时遍历数组，两数加和判断是否为target，如果小于target，则头指针加1，如果大于target尾指针加1，直到两指针相遇。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span>[] result = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        a = nums[i] + nums[j];</span><br><span class="line">        <span class="keyword">if</span> (a == target) &#123;</span><br><span class="line">            result[<span class="number">0</span>] = i;</span><br><span class="line">            result[<span class="number">1</span>] = j;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; target) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>延时对列</title>
      <link href="/2018/11/16/%E5%BB%B6%E6%97%B6%E5%AF%B9%E5%88%97/"/>
      <url>/2018/11/16/%E5%BB%B6%E6%97%B6%E5%AF%B9%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>最近做一个小小小小商城，有一个需求就是需要在订单24小时内未付款将订单取消的需求，本来想着弄个定时任务随便搞一搞就完事了，但是本着以用户体验至上的原则，还是好好做吧。</p><p>在Java的并发包里有一个<code>java.util.concurrent.DelayQueue</code>，要用这个队列必须要有一个类实现<code>java.util.concurrent.Delayed</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderCancelDelayedImpl</span> <span class="keyword">implements</span> <span class="title class_">Delayed</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderCancelDelayedImpl</span><span class="params">(Long id, LocalDate executeTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.executeTime = executeTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime executeTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getDelay</span><span class="params">(TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> executeTime.isBefore(LocalDateTime.now()) ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Delayed o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> OrderCancelDelayedImpl) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.executeTime.compareTo(((OrderCancelDelayedImpl) o).getExecuteTime());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;this is a error message&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要实现两个方法：</p><ul><li><code>getDelay</code>：官方给的解释<code>Returns the remaining delay associated with this object, in the given time unit.</code>，简单来说就是用来判断什么时候出列。返回值大于0不出列，反之出列。</li><li><code>compareTo</code>：这个没啥说的就是做个比较看看是不是放重了。</li></ul><p>在这个类中有两个属性：</p><ul><li><code>id</code>：主要记录要取消那个订单。</li><li><code>executeTime</code>：执行取消订单的时间，前期主要作用是判断执不执行。</li></ul><p>其中的属性可以根据自己的需求来添加。</p><p>然后是创建一个一个队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单相关配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 阮雪峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/1 12:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DelayQueue&lt;OrderCancelDelayedImpl&gt; <span class="title function_">delayQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DelayQueue</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是在什么时候将<code>DelayedImpl</code>放入队列，我的需求是确认订单后24小时未付款取消订单，需要在订单创建完成之后将订单信息放入队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service(&quot;orderService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略。。。</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="comment">//省略其他代码</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        order.setCreateTime(now);</span><br><span class="line">        orderDao.insert(order);</span><br><span class="line">        delayQueue.put(<span class="keyword">new</span> <span class="title class_">OrderCancelDelayedImpl</span>(order.getId(), now));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们需要启动一个线程来取消超过24小时未付款的订单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消订单线程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 阮雪峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/1 12:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CancelOrderThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;orderService&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;delayQueue&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> DelayQueue&lt;OrderCancelDelayedImpl&gt; delayQueue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        OrderCancelDelayedImpl delayed;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                delayed = delayQueue.take();</span><br><span class="line">                orderService.cancel(<span class="keyword">new</span> <span class="title class_">Order</span>(delayed.getOrderId()));</span><br><span class="line">                log.info(<span class="string">&quot;------ id为&quot;</span> + delayed.getOrderId() + <span class="string">&quot;订单已被取消 ------&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (delayed != <span class="literal">null</span>) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;------ id为&quot;</span> + delayed.getOrderId() + <span class="string">&quot;订单取消失败 ------&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再<code>OrderConfig</code>注册<code>CancelOrderThread</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CancelOrderThread <span class="title function_">cancelOrderThread</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CancelOrderThread</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后则是在启动服务器的时候启动该线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务启动完成后开始启动取消订单线程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 阮雪峰</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/1 12:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerStartedListenerCancelOrderThread</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;cancelOrderThread&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> CancelOrderThread cancelOrderThread;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getApplicationContext().getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">            cancelOrderThread.start();</span><br><span class="line">            log.info(<span class="string">&quot;------ 取消订单线程开始工作 ------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> DelayQueue </tag>
            
            <tag> Delayed </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
